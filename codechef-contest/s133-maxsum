Maximum Alternating Sum

The alternating sum of an array AA of length NN is defined to be
∑i=1N(−1)i+1Ai
i=1∑N​(−1)i+1Ai​

If you expand it out, this is the expression A1−A2+A3−A4+…+(−1)N+1ANA1​−A2​+A3​−A4​+…+(−1)N+1AN​.

You're given an array AA containing NN integers. You can rearrange this array however you like.
Find the maximum possible value of the alternating sum of AA after rearrangement.
Input Format

    The first line of input will contain a single integer TT, denoting the number of test cases.
    Each test case consists of two lines of input.
        The first line of each test case contains a single integer NN — the length of the array.
        The second line contains NN space-separated integers A1,A2,…,ANA1​,A2​,…,AN​.

Output Format

For each test case, output on a new line the answer: the maximum possible alternating sum after rearranging AA.
Constraints

    1≤T≤1051≤T≤105
    1≤N≤2⋅1051≤N≤2⋅105
    1≤Ai≤1041≤Ai​≤104
    The sum of NN over all test cases won't exceed 2⋅1052⋅105.

Sample 1:
Input
Output

4
3
1 2 3
4
5 5 5 5
6
3 1 4 1 5 9
2
10 20

4
0
13
10

Explanation:

Test case 11: One optimal rearrangement is [2,1,3][2,1,3], which gives an alternating sum of 2−1+3=42−1+3=4


------------------------------------

#include <bits/stdc++.h>
#include <iostream>
using namespace std;

void solve()
{
	int n;
	cin >> n;

	vector<int> v(n);
	for (int i = 0; i < n; i++)
	{
		cin >> v[i];
	}
	sort(v.begin(), v.end());

	int altSum = 0;

	for (int i = 0, j = n - 1; i <= j; i++, j--)
	{
		if (i == j)
		{
			altSum += v[i];
		}
		else
		{
			altSum += v[j];
			altSum -= v[i];
		}
	}

	cout << altSum << endl;
}

int main()
{
	int t;
	cin >> t;

	while (t--)
	{
		solve();
	}
	return 0;
}
